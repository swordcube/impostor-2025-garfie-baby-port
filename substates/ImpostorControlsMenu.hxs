var inputAllowed:Bool = false;

var bindCategories:Array<BindCategory> = [
    {
        name: "Notes",
        binds: [
            {
                name: "Left",
                control: Control.NOTE_LEFT
            },
            {
                name: "Down",
                control: Control.NOTE_DOWN
            },
            {
                name: "Up",
                control: Control.NOTE_UP
            },
            {
                name: "Right",
                control: Control.NOTE_RIGHT
            }
        ]
    },
    {
        name: "UI",
        binds: [
            {
                name: "Left",
                control: Control.UI_LEFT
            },
            {
                name: "Down",
                control: Control.UI_DOWN
            },
            {
                name: "Up",
                control: Control.UI_UP
            },
            {
                name: "Right",
                control: Control.UI_RIGHT
            },
            {
                name: "Reset",
                control: Control.RESET
            },
            {
                name: "Accept",
                control: Control.ACCEPT
            },
            {
                name: "Back",
                control: Control.BACK
            },
            {
                name: "Pause",
                control: Control.PAUSE
            }
        ]
    },
    {
        name: "Window",
        binds: [
            {
                name: "Screenshot",
                control: Control.SCREENSHOT
            },
            {
                name: "Fullscreen",
                control: Control.FULLSCREEN
            }
        ]
    },
    {
        name: "Volume",
        binds: [
            {
                name: "Up",
                control: Control.VOLUME_UP
            },
            {
                name: "Down",
                control: Control.VOLUME_DOWN
            },
            {
                name: "Mute",
                control: Control.VOLUME_MUTE
            }
        ]
    },
    {
        name: "Debug",
        binds: [
            {
                name: "Reload State",
                control: Control.DEBUG_RELOAD
            },
            {
                name: "Debug Menu",
                control: Control.DEBUG
            },
            {
                name: "Emergency",
                control: Control.EMERGENCY
            },
            {
                name: "Manage Content",
                control: Control.MANAGE_CONTENT
            }
        ]
    }
];
var curBindIndex:Int = 0;
var curMappings:ActionMap<Control>;

var curSelected:Int = 0;
var grpText:FlxTypedGroup<FlxText>;

var bindNames:Array<FlxText> = [];
var bindTexts:Array<Array<FlxText>> = [];

var promptCam:FlxCamera;
var camFollow:FlxObject;

var controlItems:Array<Control> = [];
var changingBind:Bool = false;

var bindPrompt:Prompt;
var openedPrompt:Bool = false;

var pressedKeyYet:Bool = false;

function makeControlText(x:Float, y:Float, text:String) {
    var text:FlxText = new FlxText(x, y, 0, text, 25);
    text.setFormat(Paths.font("fonts/bahn"), 25, FlxColor.WHITE, FlxTextAlign.LEFT, FlxTextBorderStyle.OUTLINE, FlxColor.BLACK);
    return text;
}

function onCreate() {
    curMappings = controls.getCurrentMappings();

    camera = new FlxCamera(495, 77, 680, 565);
    camera.bgColor = 0;
    FlxG.cameras.add(camera, false);

    promptCam = new FlxCamera();
    promptCam.bgColor = 0;
    FlxG.cameras.add(promptCam, false);

    grpText = new FlxTypedGroup();
    add(grpText);

    bindCategories[bindCategories.length - 1].binds.push({
        name: "Reset to Default Keys",
        control: null
    });
    var y:Int = 0;
    for(i => category in bindCategories) {
        final categoryName:FlxText = makeControlText(5, (40 * y++) + 30, category.name.toUpperCase());
        grpText.add(categoryName);

        if(category.binds != null) {
            for(bind in category.binds) {
                if(bind.control != null) {
                    final bindName:FlxText = makeControlText(5, (40 * y) + 30, bind.name);
                    bindNames.push(bindName);  
                    grpText.add(bindName);

                    final firstBind:FlxText = makeControlText(camera.width - 475, (40 * y) + 30, InputFormatter.formatFlixel(Controls.getKeyFromInputType(curMappings.get(bind.control)[0])));
                    grpText.add(firstBind);
        
                    final secondBind:FlxText = makeControlText(firstBind.x + 150, (40 * y) + 30, InputFormatter.formatFlixel(Controls.getKeyFromInputType(curMappings.get(bind.control)[1])));
                    grpText.add(secondBind);
        
                    controlItems.push(bind.control);
                    bindTexts.push([firstBind, secondBind]);
                } else {
                    y++;
                    final bindName:FlxText = makeControlText(5, (40 * y) + 30, bind.name);
                    bindNames.push(bindName);  
                    grpText.add(bindName);

                    controlItems.push(null);
                    bindTexts.push(null);
                }
                y++;
            }
        }
        y++;
    }
    camFollow = new FlxObject(0, 0, 1, 1);
    add(camFollow);

    bindPrompt = new UIPrompt("\nPress any key to rebind\n\n\nBackspace to unbind\nEscape to cancel", UIPromptButtonStyle.None);
    bindPrompt.create();
    bindPrompt.createBGFromMargin(100, 0xFFfafd6d);
    bindPrompt.cameras = [promptCam];
    bindPrompt.exists = false;
    add(bindPrompt);
    
    final margin:Float = 50;
    camera.follow(camFollow, null, 0.16);
    camera.deadzone.set(0, margin, camera.width, camera.height - margin * 2);
    camera.minScrollY = 0;

    changeSelection(0, true);
}

function onUpdate(dt:Float) {
    if(!inputAllowed) {
        inputAllowed = true;
        return;
    }
    if(openedPrompt)
        return;

    if(!changingBind) {
        final wheel:Float = -FlxG.mouse.wheel;
        if(controls.justPressed.check(Control.UI_UP) || wheel < 0)
            changeSelection(-1);

        if(controls.justPressed.check(Control.UI_DOWN) || wheel > 0)
            changeSelection(1);

        if(controls.justPressed.check(Control.UI_LEFT) || controls.justPressed.check(Control.UI_RIGHT)) {
            curBindIndex = (curBindIndex + 1) % 2;
            changeSelection(0, true);
        }
        if(controls.justPressed.check(Control.ACCEPT)) {
            if(curSelected >= bindTexts.length - 1)
                resetAllBinds();
            else {
                bindPrompt.exists = true;
                startChangingBind();
            }
        }
        if(controls.justPressed.check(Control.RESET)) 
            resetSpecificBind();
        
        if(controls.justPressed.check(Control.BACK)) {
            FlxG.sound.play(Paths.sound('menus/sfx/cancel'));
            controls.flush();
            close();
        }
    } else {
        if(changingBind && !pressedKeyYet && FlxG.keys.justPressed.ANY) {
            pressedKeyYet = true;
            
            bindPrompt.exists = false;
            stopChangingBind();
        }
    }
}

function resetAllBinds() {
    final resetPrompt:UIPrompt = new UIPrompt("\nAre you sure you want\nto reset all binds?", UIPromptButtonStyle.YesNo);
    resetPrompt.create();
    resetPrompt.createBGFromMargin(100, 0xFFfafd6d);
    resetPrompt.onYes = () -> {
        final defaultMappings:ActionMap<Control> = controls.getDefaultMappings();
        for(i => fuck in bindTexts) {
            if(fuck == null)
                continue;
            
            for(j in 0...fuck.length) {
                final newKey:FlxKey = Controls.getKeyFromInputType(defaultMappings.get(controlItems[i])[j]);
                bindTexts[i][j].text = InputFormatter.formatFlixel(newKey);
            }
        }
        FlxTimer.wait(0.001, () -> {
            final defaultMappings:ActionMap<Control> = controls.getDefaultMappings();
            openedPrompt = false;
            for(c in controlItems) {
                if(c == null)
                    continue;

                for(i in 0...2) {
                    final newKey:FlxKey = Controls.getKeyFromInputType(defaultMappings.get(c)[i]);
                    controls.bindKey(c, i, newKey);
                    controls.apply();
                }
            }
        });
        curMappings = controls.getCurrentMappings();

        resetPrompt.closePrompt();
        FlxG.sound.play(Paths.sound("menus/sfx/select"));
    };
    resetPrompt.onNo = () -> {
        FlxTimer.wait(0.001, () -> {
            openedPrompt = false;
            resetPrompt.closePrompt();
        });
    };
    resetPrompt.cameras = [promptCam];
    add(resetPrompt);

    openedPrompt = true;
}

function resetSpecificBind() {
    final resetPrompt:Prompt = new UIPrompt("\nAre you sure you want\nto reset this bind?", UIPromptButtonStyle.YesNo);
    resetPrompt.create();
    resetPrompt.createBGFromMargin(100, 0xFFfafd6d);
    resetPrompt.onYes = () -> {
        final defaultMappings:ActionMap<Control> = controls.getDefaultMappings();
        final newKey:FlxKey = Controls.getKeyFromInputType(defaultMappings.get(controlItems[curSelected])[curBindIndex]);
        
        final bindText:AtlasText = bindTexts[curSelected][curBindIndex];
        bindText.text = InputFormatter.formatFlixel(newKey);
        
        FlxTimer.wait(0.001, () -> {
            openedPrompt = false;
            controls.bindKey(controlItems[curSelected], curBindIndex, newKey);
            controls.apply();
        });
        curMappings.get(controlItems[curSelected])[curBindIndex] = newKey;

        resetPrompt.closePrompt();
        FlxG.sound.play(Paths.sound("menus/sfx/select"));
    };
    resetPrompt.onNo = () -> {
        FlxTimer.wait(0.001, () -> {
            openedPrompt = false;
            resetPrompt.closePrompt();
        });
    };
    resetPrompt.cameras = [promptCam];
    add(resetPrompt);

    openedPrompt = true;
}

function startChangingBind():Void {
    changingBind = true;
    FlxG.sound.play(Paths.sound("menus/sfx/select"));

    final bindText:AtlasText = bindTexts[curSelected][curBindIndex];
    if(Options.flashingLights)
        FlxFlicker.flicker(bindText, 0, 0.06, true, false);
    else
        bindText.visible = false;
}

function stopChangingBind():Void {
    var newKey:FlxKey = FlxG.keys.firstJustPressed();
    switch(newKey) {
        case FlxKey.NONE:
            return;

        case FlxKey.BACKSPACE:
            newKey = FlxKey.NONE;

        case FlxKey.ESCAPE:
            changingBind = false;
            pressedKeyYet = false;

            final bindText:AtlasText = bindTexts[curSelected][curBindIndex];
            bindText.visible = true;
            FlxFlicker.stopFlickering(bindText);

            return;

        default:
    }
    changingBind = false;
    pressedKeyYet = false;

    final bindText:AtlasText = bindTexts[curSelected][curBindIndex];
    FlxFlicker.stopFlickering(bindText);

    bindText.text = InputFormatter.formatFlixel(newKey);
    bindText.visible = true;
    
    FlxTimer.wait(0.001, () -> {
        controls.bindKey(controlItems[curSelected], curBindIndex, newKey);
        controls.apply();
    });
    curMappings.get(controlItems[curSelected])[curBindIndex] = newKey;
}

function changeSelection(by:Int = 0, ?force:Bool = false):Void {
    if(by == 0 && !force)
        return;

    curSelected = FlxMath.wrap(curSelected + by, 0, bindNames.length - 1);

    for(i => item in bindNames) {
        if(curSelected == i)
            item.alpha = 1;
        else
            item.alpha = 0.6;

        if(bindTexts[i] != null) {
            for(j => item2 in bindTexts[i]) {
                if(curSelected == i && curBindIndex == j)
                    item2.alpha = 1;
                else
                    item2.alpha = 0.6;
            }
        }
    }
    camFollow.y = bindNames[curSelected].y;
    FlxG.sound.play(Paths.sound("menus/sfx/scroll"));
}

function onDestroy() {
    FlxG.cameras.remove(camera);
    FlxG.cameras.remove(promptCam);
}