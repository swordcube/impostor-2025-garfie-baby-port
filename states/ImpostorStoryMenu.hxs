public static var imp_story_curDiff:Int = 1;
public static var imp_story_curWeek:Int = 0;
public static var imp_story_curPlaying:String = 'bf';

var ext:String = 'menus/story/';
var map:FlxSprite;
var selectedWeek:Bool = false;
var weekNameText:FlxText;
var songsText:FlxText;
var weekText:FlxText;
var diffText:FlxText;
var lerpScore:Int = 0;
var tweenMap:FlxTween;
var intendedScore:Int = 0;
var starFG:FlxBackdrop;
var starBG:FlxBackdrop;
var scoreText:FlxText;
var beans:Array<FlxSprite> = [];
var pointerLeft:FlxSprite;
var pointerRight:FlxSprite;
var checkmark:FlxSprite;
var weekRank:RankIcon;

var weekSpots:Array<String> = [
    'polus',
    'mira'
];
var weekMap:Map<String, Dynamic> = ["" => null];
var loadedWeeks:Array<LevelData> = [];
var diffs:Array<String> = ['normal', 'hard'];

function makeRankIcon(?x:Float, ?y:Float) {
    var icon = new FlxSprite(x ?? 0.0, y ?? 0.0);
    icon.frames = Paths.getSparrowAtlas('menus/common/ranks');
    icon.animation.addByPrefix('S', 'S', 0, false);
    icon.animation.addByPrefix('A', 'A', 0, false);
    icon.animation.addByPrefix('B', 'B', 0, false);
    icon.animation.addByPrefix('C', 'C', 0, false);
    icon.animation.addByPrefix('D', 'D', 0, false);
    icon.animation.addByPrefix('F', 'F', 0, false);
    return icon;
}

function setAccOnRankIcon(icon:RankIcon, accuracy:Float) {
    icon.visible = accuracy != 0.0;
		
    if (accuracy != 0.0) {
        final offsets:Map<String, Array<Int>> = [
            'S' => [0, 0],
            'A' => [-25, -10],
            'B' => [-50, -10],
            'C' => [-50, -15],
            'D' => [-55, -8],
            'F' => [-50, -15]
        ];
        if (accuracy >= 95) rank = 'S';
        else if (accuracy >= 90) rank = 'A';
        else if (accuracy >= 80) rank = 'B';
        else if (accuracy >= 70) rank = 'C';
        else if (accuracy >= 60) rank = 'D';
        else rank = 'F';
        
        icon.animation.play(rank);
        icon.offset.set(offsets[rank][0], offsets[rank][1]);
    }
}

function onCreate() {
    persistentUpdate = true;

    imp_didSplash = true;
    imp_alreadyBeenInMenu = true;
    imp_titleTransitioning = true;
    
    if(FlxG.sound.music == null || !FlxG.sound.music.playing)
        CoolUtil.playMenuMusic();

    var notblack:FlxSprite = new FlxSprite(0, 0).makeGraphic(FlxG.width, FlxG.height, 0x06080C);
    var grad:FlxSprite = new FlxSprite(0, 0).loadGraphic(Paths.image(ext + 'gradient'));
    
    starFG = new FlxBackdrop(Paths.image('menus/common/starFG'));
    starFG.updateHitbox();
    starFG.scrollFactor.set();
    
    starBG = new FlxBackdrop(Paths.image('menus/common/starBG'));
    starBG.updateHitbox();
    starBG.scrollFactor.set();
    
    var dark:FlxSprite = new FlxSprite(450, 0).loadGraphic(Paths.image(ext + 'dark'));
    dark.scale.set(1, 1);
    dark.updateHitbox();
    
    map = new FlxSprite(645, 295 - 115).loadGraphic(Paths.image(ext + 'maps'));
    /*map = new FlxSprite(645,295-115).loadGraphic(Paths.image(ext + 'maps'), true, 500, 500);
        for(i in 0...weekSpots.length) {
            map.animation.add(weekSpots[i], [i], 0, false);
        }
        map.animation.play(weekSpots[0]); */
    
    var bb:FlxSprite = new FlxSprite(0, 0).loadGraphic(Paths.image('menus/common/blackbars'));
    bb.scale.set(2, 2);
    bb.updateHitbox();
    
    var overlay:FlxSprite = new FlxSprite(0, 0).loadGraphic(Paths.image(ext + 'menu'));
    var pc:FlxSprite = new FlxSprite(811, 62).loadGraphic(Paths.image(ext + 'storychars/' + imp_story_curPlaying));
    var ct:FlxSprite = new FlxSprite(42.15, 668.3).loadGraphic(Paths.image('menus/common/controls_ex'));
    
    for (i in [notblack, grad, starBG, starFG, dark, map, bb, overlay, ct, pc])
        add(i);
    
    pointerLeft = new FlxSprite(625, 400).loadGraphic(Paths.image(ext + 'pointers'), true, 70, 70);
    pointerRight = new FlxSprite(1100, 400).loadGraphic(Paths.image(ext + 'pointers'), true, 70, 70);
    
    for (pointer in [pointerLeft, pointerRight]) {
        pointer.animation.add('left', [0], 0, false);
        pointer.animation.add('mid', [1], 0, false);
        pointer.animation.add('right', [2], 0, false);
        add(pointer);
    }
    
    // KEEP AS VARS
    var storyText:FlxText = new FlxText(40, 20, -1, 'Story');
    storyText.setFormat(Paths.font("fonts/bahn"), 60, 0xFFFFFF, FlxTextAlign.LEFT, FlxTextBorderStyle.OUTLINE, FlxColor.BLACK);

    var diffText2:FlxText = new FlxText(70, 450, -1, 'Difficulty:');
    diffText2.setFormat(Paths.font("fonts/bahn"), 50, 0xFFFFFF, FlxTextAlign.LEFT, FlxTextBorderStyle.OUTLINE, FlxColor.BLACK);

    // THE WEEK NAME
    weekText = new FlxText(70, 170, -1, 't');
    weekText.setFormat(Paths.font("fonts/bahn"), 60, 0xFFFFFF, FlxTextAlign.LEFT, FlxTextBorderStyle.OUTLINE, FlxColor.BLACK);

    // THE WEEK NAME TEXT
    weekNameText = new FlxText(70, 250, -1, '"Polus Problem"');
    weekNameText.setFormat(Paths.font("fonts/bahn"), 50, 0xFFFFFF, FlxTextAlign.LEFT, FlxTextBorderStyle.OUTLINE, FlxColor.BLACK);

    // SONGS LIST
    songsText = new FlxText(300, 315, -1, '');
    songsText.setFormat(Paths.font("fonts/bahn"), 25, 0xFFFFFF, FlxTextAlign.LEFT, FlxTextBorderStyle.OUTLINE, FlxColor.BLACK);

    // DIF
    diffText = new FlxText(370, 15, -1, 'Difficulty');
    diffText.setFormat(Paths.font("fonts/bahn"), 35, 0xFFFFFF, FlxTextAlign.LEFT, FlxTextBorderStyle.OUTLINE, FlxColor.BLACK);

    // SCORE LIST
    scoreText = new FlxText(23, 515, 543, 'FIX YO CODE FATASS!');
    scoreText.setFormat(Paths.font("fonts/bahn"), 50, 0xFFFFFF, FlxTextAlign.CENTER, FlxTextBorderStyle.OUTLINE, FlxColor.BLACK);
    
    for (i in [storyText, diffText2, weekText, weekNameText, songsText, scoreText, diffText]) {
        i.borderSize = 2.5;
        add(i);
    }
    
    // The week render
    var render:FlxSprite = new FlxSprite(30, 308).loadGraphic(Paths.image(ext + 'storyRender'));
    render.blend = 0; // 0 = add
    add(render);
    
    for (i in 0...5) {
        var bean:FlxSprite = new FlxSprite(284 + (50 * i), 463).loadGraphic(Paths.image(ext + 'beanDiff'), true, 46, 50);
        bean.animation.add('brah', [0, 1], 0, false);
        bean.animation.play('brah');
        Reflect.setProperty(bean, "ID", i);
        beans.push(bean);
        add(bean);
    }
    
    checkmark = new FlxSprite(370, 185).loadGraphic(Paths.image(ext + 'checkmark'));
    checkmark.alpha = 0.01;
    add(checkmark);

    weekRank = makeRankIcon(460, 505);
    setAccOnRankIcon(weekRank, 100);
    add(weekRank);
    
    var meta = Paths.contentMetadata.get(parentContentPack);
    for (i in 0...meta.levels.length) {
        var weekFile:LevelData = meta.levels[i];
        weekMap.set(weekFile.id, weekFile);
        loadedWeeks.push(weekFile);
    }
    reloadSongList();
}

function isWeekLocked(name:String):Bool {
    final level:LevelData = weekMap.get(name);
    if(level == null)
        return false;
    
    var levelBeforeCompleted:Bool = false;
    var levelBeforeID:String = '${parentContentPack}:${level.levelBefore}';
    var levelBefore:LevelData = (level.levelBefore != null && level.levelBefore.length != 0) ? weekMap.get(levelBeforeID) : null;
    
    if(levelBefore != null) {
        for(diffs in levelBefore.difficulties) {
            for(diff in diffs) {
                if(Highscore.getLevelRecord(Highscore.getLevelRecordID(levelBeforeID, diff)).score > 0) {
                    levelBeforeCompleted = true;
                    break;
                }
            }
        }
    }
    return !level.startUnlocked && (level.levelBefore != null && level.levelBefore.length != 0 && !levelBeforeCompleted);
}

function nahFuckOff() {
    FlxG.sound.play(Paths.sound('menus/sfx/locked'));
    FlxG.camera.shake(0.003, 0.1, null, true, FlxAxes.XY);
}

function reloadSongList() {
    var songString = '';
    var leWeek:LevelData = loadedWeeks[imp_story_curWeek];
    
    pointerLeft.animation.play((imp_story_curWeek - 1 <= -1) ? 'mid' : 'left');
    pointerRight.animation.play((imp_story_curWeek + 1 >= loadedWeeks.length) ? 'mid' : 'right');
    
    reloadDiff();
    
    weekNameText.text = leWeek.name;
    weekText.text = StringTools.replace(StringUtil.capitalize(leWeek.id.substr(9)), 'k', 'k ');
    
    var songs:Array<Dynamic> = leWeek.songs;
    for (i in 0...songs.length) {
        var songMeta = (FlxG.assets.exists(Paths.json('gameplay/songs/${songs[i]}/default/metadata'))) ? SongMetadata.load(songs[i]) : null;
        if(songMeta != null)
            songString += songMeta.song.title + '\n';
        else
            songString += songs[i] + '\n';
    }
    
    songsText.text = songString;
    if (tweenMap != null) tweenMap.cancel();
    
    tweenMap = FlxTween.tween(map, {x: 645 - imp_story_curWeek * 500}, 1, {
        ease: FlxEase.elasticOut,
        onComplete: function(twn:FlxTween) {
            tweenMap = null;
        }
    });
    checkmark.alpha = ((isWeekLocked(leWeek.id)) ? 1 : 0.01);
}

function reloadDiff() {
    diffText.text = 'Difficulty: ' + (diffs[imp_story_curDiff - 1] == 'hard' ? 'HARD' : 'NORMAL');
    var leWeek:LevelData = loadedWeeks[imp_story_curWeek];
    
    var weekDiff = leWeek.extra.beanDiffs[imp_story_curDiff - 1];
    for (i in beans) i.animation.curAnim.curFrame = ((Reflect.getProperty(i, "ID") >= weekDiff) ? 0 : 1);

    var recordID = Highscore.getLevelRecordID('${parentContentPack}:${leWeek.id}', diffs[imp_story_curDiff - 1], parentContentPack);
    var record = Highscore.getLevelRecord(recordID);
    intendedScore = record.score;
    
    // basically we grab the accuracy from each song in the week and then add it to weekAccuracy to get the overall rank of the week
    /*
    var weekAccuracy:Float = 0;
    for (i in 0...leWeek.songs.length)
    {
        weekAccuracy += Highscore.getWeekRating(leWeek.songs[i][0], imp_story_curDiff);
    }
    */
    // the math is weekAccuracy value divided by the amount of songs in the week
    setAccOnRankIcon(weekRank, record.accuracy * 100);

    var selectedItem:String = '${StringUtil.capitalize(leWeek.id.substr(9))} [${(diffs[imp_story_curDiff - 1] == 'hard' ? 'HARD' : 'NORMAL')}]';
    DiscordRPC.changePresence("Story Menu", '${selectedItem}');
}

function changeDiff() {
    FlxG.sound.play(Paths.sound('menus/sfx/diffcheck'));
    imp_story_curDiff = (imp_story_curDiff == 1 ? 2 : 1);
    reloadDiff();
}

function changeWeek(?change:Int):Void {
    change ??= 0;
    imp_story_curWeek += change;
    if (imp_story_curWeek < 0) {
        imp_story_curWeek = 0;
        nahFuckOff();
        return;
    }
    if (imp_story_curWeek >= loadedWeeks.length) {
        imp_story_curWeek = loadedWeeks.length - 1;
        nahFuckOff();
        return;
    }
    reloadSongList();
}

function selectWeek() {
    FlxG.sound.play(Paths.sound('menus/sfx/select'));

    var leWeek:LevelData = loadedWeeks[imp_story_curWeek];
    selectedWeek = true;

    var pendingPlaylist:Array<String> = [];
    for(song in leWeek.songs) {
        if(FlxG.assets.exists(Paths.json('gameplay/songs/${song}/default/metadata')))
            pendingPlaylist.push(song);
    }
    PlayState.storyStats = new PlayerStats();
    PlayState.storyPlaylist = pendingPlaylist;
    PlayState.storyLevel = '${parentContentPack}:${leWeek.id}';
    
    FlxG.switchState(() -> return new PlayState({
        song: PlayState.storyPlaylist.shift(),
        difficulty: diffs[imp_story_curDiff - 1],
        // mix: currentMix,
        mod: parentContentPack,
        isStoryMode: true
    }));
    FlxG.sound.music.fadeOut(0.16, 0);
}

function onUpdate(dt:Float) {
    starFG.x -= 0.03;
    starBG.x -= 0.01;
    lerpScore = FlxMath.lerp(lerpScore, intendedScore, FlxMath.bound(dt * 30, 0, 1));
    if(Math.abs(intendedScore - lerpScore) < 10)
        lerpScore = intendedScore;

    scoreText.text = "Score: " + FlxStringUtil.formatMoney(Math.floor(lerpScore), false, true);
    if (!selectedWeek) {
        if (controls.justPressed.check(Control.UI_LEFT))
            changeWeek(-1);

        if (controls.justPressed.check(Control.UI_RIGHT))
            changeWeek(1);

        if (FlxG.keys.justPressed.E || FlxG.keys.justPressed.Q)
            changeDiff();

        if (controls.justPressed.check(Control.ACCEPT))
            selectWeek();
        
        if (controls.justPressed.check(Control.BACK)) {
            FlxG.switchState(new TitleState());
            FlxG.sound.play(Paths.sound('menus/sfx/cancel'));
        }
        if (controls.justPressed.check(Control.RESET)) {
            persistentUpdate = false;
            openSubState(new ScriptedSubState('ResetScoreSubStateImpostor', ['', diffs[imp_story_curDiff - 1], imp_story_curWeek, parentContentPack]));
        }
    }
}

function onSubStateClose() {
    persistentUpdate = true;
	changeWeek();
}