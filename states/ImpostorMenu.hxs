import funkin.states.TransitionableState;

static var imp_curSel:Int = 0;

var PLAYED_V4:Bool = false;
var PLAYED_V3:Bool = false;

var trophy:FlxSprite = null;
var lg:FlxSprite;
var lt:FlxText;

var bg:FlxSprite;
var stars:FlxSprite;
var ct:FlxSprite;

var snowAlpha:Float = 0;
var snowEmitter:SnowEmitter;

var starFG:FlxBackdrop;
var starBG:FlxBackdrop;

var hasSplash = false;
var opts:FlxTypedGroup<FlxSprite>;
var ott:FlxTypedGroup<FlxText>;
var colorSwap:ColorSwap;
var tv:FlxSprite;
var zared:FlxSprite;
var canSelect:Bool;
var v2Check = true; // SET THIS TO FALSE IN V2

// Now that this state is hardcoded we can finally make it so it stays on the selection
var boundaries = 4; // When to start looping the menu, just in case we're going with the shop-lock until V2.

var skippedIntro:Bool = false;
var increaseVolume:Bool = false;

var buttons:Array<Dynamic> = [
    // buttons! add translation later!
    [52.65, 265.85, 'SM', 'Story Mode'],
    [52.65, 344.45, 'FP', 'Freeplay'],
    [52.65, 423.05, 'OP', 'Options'],
    [55.7, 500.5, 'SK', 'Skins'],
    [172.1, 500.5, 'SH', 'Shop']
];

var secretKey:Array<FlxKey> = [FlxKey.D, FlxKey.K];
var lastKeysPressed:Array<FlxKey> = [];
var keyTimer:Float = 0;

function checkPreviousVers() {
    final appDataPath = Sys.getEnv("AppData");
    PLAYED_V4 = FileSystem.isDirectory('${appDataPath}/ShadowMario/VS Impostor');
    PLAYED_V3 = FileSystem.isDirectory('${appDataPath}/Team Funktastic/Kade Engine'); // is this the actual path of v3 ? idk
}

function selectedOption() {
    // SELECTING A STATE
    TransitionableState.skipNextTransIn = false;
    TransitionableState.skipNextTransOut = false;
    
    final nextState:Null<NextState> = switch (imp_curSel)
    {
        case 0: () -> return new StoryMenuState();
        case 1: () -> return new FreeplayState();
        case 2: () -> return new OptionsState();
        default: null;
    }
    
    if (nextState != null) {
        FlxG.sound.play(Paths.sound('menus/sfx/select'));
        FlxTimer.wait(0.5, () -> FlxG.switchState(nextState));
    } else {
        FlxG.sound.play(Paths.sound('menus/sfx/locked'));
        FlxG.camera.shake(0.003, 0.1, null, true, FlxAxes.XY);
        return;
    }
    
    canSelect = false;
    
    // WHEN ITS NOT SELECTED, MAKE BOTH ALPHA GAY
    opts.forEach(function(spr:FlxSprite) {
        if (imp_curSel != Reflect.getProperty(spr, "ID")) FlxTween.tween(spr, {alpha: 0.25}, 0.5, {ease: FlxEase.quadOut});
    });
    ott.forEach(function(spr:FlxText) {
        if (imp_curSel != Reflect.getProperty(spr, "ID")) FlxTween.tween(spr, {alpha: 0.25}, 0.5, {ease: FlxEase.quadOut});
    });
    
    // move the scroll instead of everything
    FlxTween.tween(FlxG.camera.scroll, {y: -700}, 1, {ease: FlxEase.quadIn});
}

function makeSnowEmitter(x, y, size, width) {
    final snowEmitter:CustomEmitter = new CustomEmitter(x, y, size);
    snowEmitter.width = width;
	snowEmitter.scrollFactor.min.set(1, 1.5);
	snowEmitter.scrollFactor.max.set(1, 1.5);
    snowEmitter.start(false, 0.05);
    
    snowEmitter.launchAngle.set(100, 160);
    snowEmitter.angularVelocity.set(-80, 100);
    
    snowEmitter.lifespan.set(10); //fuck it
    snowEmitter.speed.set(500, 700);

    snowEmitter.alpha.set(1, null, 0, 1);
    snowEmitter.onEmit.add((particle:FlxParticle) -> {
        particle.alpha = snowAlpha;
        particle.frames = Paths.getSparrowAtlas("common/snow_particles");
        particle.animation.addByPrefix('snow', 'snow', 0, false);
		particle.animation.frameIndex = FlxG.random.int(0, 7);
    });
    return snowEmitter;
}

function onCreate() {
    imp_didSplash = true;
    if (FlxG.sound.music == null || !FlxG.sound.music.playing) {
        CoolUtil.playMenuMusic(0);
        FlxG.sound.music.fadeIn(4, 0, 1);
    }
    TitleState.initialized = true;
    DiscordRPC.changePresence("Title Screen", null);

    var versionString = 'VS IMPOSTOR WEEK 1';
    canSelect = true;
    
    opts = new FlxTypedGroup(); // GROUP ON GOD!
    ott = new FlxTypedGroup(); // GROUP ON GOD!
    
    starFG = new FlxBackdrop(Paths.image('menus/common/starFG'));
    starFG.updateHitbox();
    starFG.scrollFactor.set();
    add(starFG);
    
    starBG = new FlxBackdrop(Paths.image('menus/common/starBG'));
    starBG.scrollFactor.set();
    add(starBG);
    
    // Background
    bg = new FlxSprite(-121, 226.8 + 700).loadGraphic(Paths.image('menus/common/bg'));
    
    snowEmitter = makeSnowEmitter(200, -100, FlxG.width + 200, FlxG.width + 200);
    snowEmitter.scale.set(0.5);
    snowEmitter.start(false, 0.05);
    snowEmitter.scrollFactor.min.set(0.8, 0.8);
    snowEmitter.scrollFactor.max.set(0.8, 0.8);
    snowAlpha = imp_alreadyBeenInMenu ? 1 : 0;
    
    tv = new FlxSprite(1100, 450);
    tv.frames = Paths.getSparrowAtlas("menus/main/tv");
    tv.animation.addByPrefix('idle', 'TVIDLE', 24, false);
    tv.animation.addByPrefix('on', 'TVON', 24, false);
    tv.alpha = 0;
    tv.scale.set(1, 1);
    tv.scrollFactor.set(1, 1);
    
    // Logo, probably make it a real sprite for later
    lg = new FlxSprite(27, 82).loadGraphic(Paths.image('menus/main/logo'));
    lg.screenCenter();
    lg.scrollFactor.set();
    
    // Black bars, scaled them up ingame because It's black bars I dont think they need to be 1280x720
    var bb:FlxSprite = new FlxSprite(0, 0).loadGraphic(Paths.image('menus/common/blackbars'));
    bb.scale.set(2, 2);
    bb.updateHitbox();
    bb.scrollFactor.set();
    
    // Control panel thing
    ct = new FlxSprite(42.15, 668.3 + 100).loadGraphic(Paths.image('menus/common/controls'));
    ct.scrollFactor.set();
    
    lt = new FlxText(0, 715, 1280, 'Press Enter to Start');
    lt.setFormat(Paths.font("fonts/bahn"), 25, 0xFFFFFF, FlxTextAlign.CENTER, FlxTextBorderStyle.OUTLINE, FlxColor.BLACK);
    lt.y -= lt.height;
    lt.borderSize = 2.5;
    lt.scrollFactor.set();
    
    // This does not optimize anything.
    // then why'd ya do it -swordcube
    for (i in [bg, bb, lg, ct])
        add(i);
    
    add(lt);
    bg.antialiasing = false;
    
    insert(members.indexOf(bb), snowEmitter);
    
    zared = new FlxSprite().loadGraphic(Paths.image('menus/secret/zared'));
    zared.scrollFactor.set();
    
    // Color swap/grayscale, remove in V2.
    colorSwap = new CustomShader("color_swap");
    colorSwap.hset("saturation", -1);
    
    var versionText:FlxText = new FlxText(0, (imp_alreadyBeenInMenu ? 0 : -70), 1280, versionString);
    versionText.setFormat(Paths.font("fonts/bahn"), 25, FlxColor.WHITE, FlxTextAlign.CENTER);
    versionText.scrollFactor.set();
    add(versionText);
    
    if (PLAYED_V3 || PLAYED_V4) { // add trophy
        var anim = PLAYED_V3 ? PLAYED_V4 ? 'v3-4' : 'v3' : 'v4';
        
        trophy = new FlxSprite().loadFromSheet('menu/main/trophy', anim, 0);
        trophy.scrollFactor.set();
        
        trophy.scale.scale(0.4);
        trophy.updateHitbox();
        
        trophy.x = (27 + (lg.width - trophy.width) / 2);
        trophy.y = (82 - trophy.height) + 30 + (imp_alreadyBeenInMenu ? 0 : -200);
        insert(members.indexOf(lg), trophy);
    }
    add(opts);
    add(ott);
    
    for (i in 0...5) {
        var but:FlxSprite = new FlxSprite(buttons[i][0] - (imp_alreadyBeenInMenu ? 0 : 500), buttons[i][1]);
        but.frames = Paths.getSparrowAtlas('menus/main/menubuttons');
        but.animation.addByPrefix('button' + buttons[i][2], 'button' + buttons[i][2], 0, false);
        but.animation.play('button' + buttons[i][2]);
        Reflect.setProperty(but, "ID", i);
        //  It's not letting me do it the normal and not stupid way
        var txt:FlxText = new FlxText(buttons[i][0] + (i > 2 ? 0 : 9.4) - (imp_alreadyBeenInMenu ? 0 : 500), buttons[i][1] + 11.35, (i > 2 ? 113 : -1), buttons[i][3]);
        txt.setFormat(Paths.font("fonts/notosans"), 35, FlxColor.WHITE, FlxTextAlign.LEFT, FlxTextBorderStyle.OUTLINE, FlxColor.BLACK);
        if (i > 2)
        { // UGH
            txt.setFormat(Paths.font("fonts/notosans"), 35, FlxColor.WHITE, FlxTextAlign.CENTER, FlxTextBorderStyle.OUTLINE, FlxColor.BLACK);
            txt.y += but.height;
            if (v2Check)
            {
                but.shader = colorSwap.shader;
                txt.color = 0x393939;
                but.color = 0x393939;
            }
        }
        txt.borderSize = 2.5;
        Reflect.setProperty(txt, "ID", i);
        opts.add(but);
        ott.add(txt);
        
        but.scrollFactor.set();
        txt.scrollFactor.set();
    }
    changeSel(0, 0);
    if (!imp_alreadyBeenInMenu)
        FlxTween.tween(versionText, {y: 0}, 1, {ease: FlxEase.quadOut});
    else
        moveShitUp(0.01);
    
    persistentUpdate = true;
    skipIntro();
}

function checkForMatch(arra:Array<Int>):Bool {
    var matched:Bool = true;
    if (arra.length == 0) return false;
    
    for (k => i in arra) {
        if (lastKeysPressed[k] != i)
            matched = false;
    }
    return matched;
}

function onUpdate(dt:Float) {
    if (starFG != null)
        starFG.x -= 0.12 * 60 * dt;
    
    if (starBG != null)
        starBG.x -= 0.04 * 60 * dt;

    if (controls.justPressed.check(Control.MANAGE_CONTENT))
        FlxG.switchState(() -> return new ContentPackState());

    var pressedEnter:Bool = FlxG.keys.justPressed.ENTER || controls.justPressed.check(Control.ACCEPT);
    if (imp_titleTransitioning) {
        if (FlxG.mouse.justPressed && members.indexOf(tv) != -1 && tv.overlapsPoint(FlxG.mouse.getWorldPosition())) {
            tv.animation.play('on');
            tv.x += -115;
            tv.y += -80;
            
            FlxG.sound.play(Paths.sound('menus/sfx/secret'));
            new FlxTimer().start(1.4, function(tmr:FlxTimer) {
                FlxG.switchState(() -> return new PlayState({
                    song: "bananas",
                    difficulty: "bananas",
                    mod: parentContentPack
                }));
                FlxG.mouse.visible = false;
            });
        }
        
        final finalKey:FlxKey = FlxG.keys.firstJustPressed();
        if (finalKey != -1) {
            keyTimer = 1;
            lastKeysPressed.push(finalKey);
            
            if (checkForMatch(secretKey)) { // dk
                insert(members.indexOf(lg) - 1, tv);
                FlxG.sound.play(Paths.sound('menus/sfx/select'));
                FlxTween.tween(tv, {alpha: 1}, 2, {ease: FlxEase.linear});
                FlxG.mouse.visible = true;
                
                secretKey = []; // prevents from doing multiple times
            }
            if (checkForMatch([FlxKey.Z, FlxKey.A, FlxKey.R, FlxKey.E, FlxKey.D]) && members.indexOf(zared) == -1) {
                zared.screenCenter(); // Center the zared sprite on the screen
                add(zared);

                new FlxTimer().start(1, (_) -> openfl.system.System.exit(0));
                FlxG.sound.play(Paths.sound('menus/sfx/loud'));
            }
        }
        
        if (keyTimer > 0)
            keyTimer -= dt;
        
        if (keyTimer <= 0)
            lastKeysPressed.resize(0);
        
        if (canSelect) {
            if (controls.justPressed.check(Control.UI_DOWN))
                changeSel(1, 1);
            
            if (controls.justPressed.check(Control.UI_UP))
                changeSel(-1, 1);
            
            if (controls.justPressed.check(Control.UI_RIGHT)) {
                if (imp_curSel == 3) {
                    imp_curSel = 4;
                    changeSel(0, 1);
                }
            }
            if (controls.justPressed.check(Control.UI_LEFT)) {
                if (imp_curSel == 4) {
                    imp_curSel = 3;
                    changeSel(0, 1);
                }
            }
            if (controls.justPressed.check(Control.ACCEPT))
                selectedOption();
        }
    }
    if (TitleState.initialized && !imp_titleTransitioning && skippedIntro) {
        if (pressedEnter) {
            FlxG.sound.play(Paths.sound('menus/sfx/select'));
            moveShitUp();
            imp_titleTransitioning = true;
            
            opts.forEach(function(spr:FlxSprite) {
                FlxTween.tween(spr, {x: buttons[Reflect.getProperty(spr, "ID")][0]}, 1, {ease: FlxEase.quadOut, startDelay: Reflect.getProperty(spr, "ID") / 6});
            });
            ott.forEach(function(spr:FlxText) {
                FlxTween.tween(spr, {x: buttons[Reflect.getProperty(spr, "ID")][0] + (Reflect.getProperty(spr, "ID") > 2 ? 0 : 9.4)}, 1, {ease: FlxEase.quadOut, startDelay: Reflect.getProperty(spr, "ID") / 6});
            });
        }
    }
}

function moveShitUp(tt:Float = 1) {
    var selectedItem:String = switch(imp_curSel) {
        case 0: "Story Mode";
        case 1: "Freeplay";
        case 2: "Options";
        case 3: "Skins";
        case 4: "Shop";
    }
    DiscordRPC.changePresence("Main Menu", 'Selected ${selectedItem}');
    
    FlxTween.tween(starFG, {alpha: 1}, tt, {ease: FlxEase.quadOut});
    FlxTween.tween(starBG, {alpha: 1}, tt, {ease: FlxEase.quadOut}); // Tween, make it more auraful and hype farmy later
    FlxTween.tween(bg, {y: bg.y - 700}, tt, {ease: FlxEase.quadOut}); // Tween, make it more auraful and hype farmy later
    FlxTween.tween(lg, {x: 27, y: 82}, tt, {ease: FlxEase.quadInOut});
    
    if (trophy != null)
        FlxTween.tween(trophy, {y: (82 - trophy.height) + 30}, tt, {ease: FlxEase.quadInOut, startDelay: 0.5});
    
    FlxTween.tween(lt, {y: lt.y + 700}, tt, {ease: FlxEase.quadInOut});
    FlxTween.tween(ct, {y: ct.y - 100}, tt, {ease: FlxEase.quadIn}); // Tween, make it more auraful and hype farmy later
    
    FlxTween.num(snowEmitter.alpha.start.min, 1, 1, {ease: FlxEase.quadIn}, (f) -> {
        snowEmitter.alpha.set(f);
        snowEmitter.forEachAlive(p -> {
            p.alpha = f;
        });
    });
}

function skipIntro():Void {
    if (!imp_alreadyBeenInMenu) {
        CoolUtil.playMenuMusic(0);
        FlxG.sound.music.fadeIn(4, 0, 1);
        FlxG.camera.flash(FlxColor.BLACK, 0.5);
        imp_alreadyBeenInMenu = true;
    }
    skippedIntro = true;
}

function changeSel(?by:Int, ?volume:Float) {
    by ??= 0;
    volume ??= 1;
    /*
        Changes Selection by the amount of by Yeah you know what this does
        - IF THE BY IS SET TO 0, THEN IT WILL NOT MAKE A NOISE
        */
    FlxG.sound.play(Paths.sound('menus/sfx/scroll'), volume);
    if (by != 0) {
        if (imp_curSel > 2) {
            if (by > 0) imp_curSel = 0;
            else imp_curSel = 2;
        }
        else imp_curSel += by;
    }
    if (imp_curSel > boundaries) imp_curSel = 0;
    if (imp_curSel < 0) imp_curSel = boundaries;

    opts.forEach(function(spr:FlxSprite) {
        spr.animation.curAnim.curFrame = (imp_curSel == Reflect.getProperty(spr, "ID") ? 1 : 0);
    });
    var selectedItem:String = switch(imp_curSel) {
        case 0: "Story Mode";
        case 1: "Freeplay";
        case 2: "Options";
        case 3: "Skins";
        case 4: "Shop";
    }
    DiscordRPC.changePresence("Main Menu", 'Selected ${selectedItem}');
}